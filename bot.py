import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from supabase import create_client, Client

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
# –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ:
# export SUPABASE_URL="–í–ê–®_URL_–ò–ó_–ù–ê–°–¢–†–û–ï–ö_API"
# export SUPABASE_SERVICE_KEY="–í–ê–®_SERVICE_ROLE_–ö–õ–Æ–ß"
SUPABASE_URL = os.environ.get("SUPABASE_URL")
SUPABASE_KEY = os.environ.get("SUPABASE_SERVICE_KEY")

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ ---
if not SUPABASE_URL or not SUPABASE_KEY:
    raise ValueError("Supabase URL and Key must be set in environment variables.")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Supabase ---
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user = update.effective_user
    user_id = user.id
    
    await update.message.reply_html(
        rf"üëã –ü—Ä–∏–≤–µ—Ç, {user.mention_html()}!",
        reply_markup=None,
    )
    await update.message.reply_text(
        f"–Ø –±–æ—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–∞–ø–æ–≤.\n\n"
        f"–í–∞—à Telegram ID: `{user_id}`\n\n"
        f"–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `5`), –∏ —è –æ–±–Ω–æ–≤–ª—é –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–∞–ø–æ–≤ –¥–ª—è –≤–∞—à–µ–π —Ç–æ—á–∫–∏ –ø—Ä–æ–∫–∞—Ç–∞."
    )

async def update_sup_count(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —á–∏—Å–ª–æ–º."""
    user_id = update.effective_user.id
    message_text = update.message.text
    
    if not message_text.isdigit():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 8")
        return

    new_count = int(message_text)
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ 'locations'
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É, –≥–¥–µ owner_telegram_id —Ä–∞–≤–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏ –º–µ–Ω—è–µ–º availableSups
        data, count = supabase.table('locations').update({'availableSups': new_count}).eq('owner_telegram_id', user_id).execute()
        
        # data[1] —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π. –ï—Å–ª–∏ –æ–Ω –ø—É—Å—Ç, –∑–Ω–∞—á–∏—Ç, –≤–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω.
        if not data[1]:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à—É —Ç–æ—á–∫—É –ø—Ä–æ–∫–∞—Ç–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à ID –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            logger.warning(f"Owner with Telegram ID {user_id} not found in Supabase.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        location_data = data[1][0]
        location_name = location_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        
        await update.message.reply_text(
            f"‚úÖ –ì–æ—Ç–æ–≤–æ!\n\n"
            f"–î–ª—è —Ç–æ—á–∫–∏ ¬´{location_name}¬ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–∞–ø–æ–≤: *{new_count}*",
            parse_mode='Markdown'
        )
        logger.info(f"Updated availableSups to {new_count} for owner {user_id} at location '{location_name}'")

    except Exception as e:
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω.")
        logger.error(f"An unexpected error occurred: {e}", exc_info=True)


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    token = os.environ.get("TELEGRAM_TOKEN")
    if not token:
        logger.error("TELEGRAM_TOKEN environment variable not set!")
        return

    application = Application.builder().token(token).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, update_sup_count))

    logger.info("Starting bot...")
    application.run_polling()


if __name__ == "__main__":
    main()

